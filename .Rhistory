lines(density(dexp(1000, 2)))
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
hist(rexp(1000, 2), freq = FALSE)
lines(dexp(1000, 2))
curve(dexp(x, 2), add=TRUE)
hist(rexp(1000, 2), freq = FALSE)
curve(dexp(x, 2), add=TRUE)
r <- 10^4
?T
?T
?t
xsample <- t(replicate(r, rnorm(n, mu, sdev))) # rows - realizations
rowMeans(xsample)
hist((m_k - mu) / (sdev / sqrt(n)), n = 50, freq = FALSE, xlab = "m")
m_k <- rowMeans(xsample)
hist((m_k - mu) / (sdev / sqrt(n)), n = 50, freq = FALSE, xlab = "m")
curve(dnorm(x, 0, 1), add = TRUE, col = "red", lwd = 2) # pdf of N(0, 1)
legend("bottomright",
legend = "pdf of N(0, 1)", col = "red", lty = 1, bty = "n"
)
#d
replicate(10, c(1,5))
r <- 10
xsample <- t(replicate(r, rnorm(n, mu, sdev))) # rows - realizations
m_k <- rowMeans(xsample)
xsample
n <- 10
xsample <- t(replicate(r, rnorm(n, mu, sdev))) # rows - realizations
xsample
replicate(r, rnorm(n, mu, sdev))
replicate(r, rnorm(n, mu, sdev))
replicate(r, rnorm(n, mu, sdev))
replicate(r, rnorm(n, mu, sdev))
replicate(r, rnorm(n, mu, sdev))
vistula_data <- c("m", "l", "l", "h", "h", "l", "h", "m", "h", "l")
?factor
factored <- factor(vistula_data, ordered = TRUE, levels = c("l", "m","h"), labels = c("low", "medium", "high"))
factored
vistula_table <- table(factored)
View(vistula_table)
#THIS MIGHT BE ON THE ASSESSMENT
vistula_freq_table <- cbind(
abs_freq = vistula_table,
proportion = prop.table(vistula_table),
com_abs_freq = cumsum(vistula_table),
cum_prop = cumsum(prop.table(vistula_table)))
vistula_freq_table
class(vistula_freq_table)
barplot(vistula_table)
factored <- factor(vistula_data, ordered = TRUE, levels = c("l", "m","h"), labels = c("low", "medium", "high"))
factored
vistula_table <- table(factored)
vistula_table
factored <- factor(vistula_data, levels = c("l", "m","h"), labels = c("low", "medium", "high"))
factored
factored <- factor(vistula_data, labels = c("low", "medium", "high"))
factored
factored <- factor(vistula_data, labels = c("low", "medium", "high"))
factored
factored <- factor(vistula_data, labels = c("low", "medium", "high"))
factored
factored <- factor(vistula_data, levels = c("l", "m","h"),labels = c("low", "medium", "high"))
factored
x <- 1
x
?outer
?outer
combined <- outer(i,j, FUN="-")
#Michał Taczała 303775
#Exercise 1 ----
i <- 1:5
j <- 1:10
combined <- outer(i,j, FUN="-")
combined_abs <- abs(combined)
val <- 2^combined_abs
val
A = matrix(val)
A
?matrix
A = matrix(val, nrow = 5, ncol = 10)
A
#Exercise 2 ----
?chickwts
#Exercise 2 ----
head(chickwts, 10)
ifelseResult <- ifelse(chickwts$weight<260, "low", "large")
outcome <- factor(ifelseResult, levels=c("low", "large"), ordered = TRUE)
outcome <- factor(ifelseResult, levels=c("low", "large"), ordered = TRUE)
outcome
table(outcome, chickwts$feed)
table(chickwts$feed, outcome)
contingencyTable <- table(chickwts$feed, outcome)
#Exercise 3 ----
?Titanic
titanicTable <- table(Titanic)
titanicTable
Titanic[,,,"Yes"]
survivedNumber <- Titanic[,,,"Yes"]
notSurvivedNumber <- Titanic[,,,"No"]
survivedNumber <- count(Titanic[,,,"Yes"])
survivedNumber <- Titanic[,,,"Yes"]
notSurvivedNumber <- Titanic[,,,"No"]
View(survivedNumber)
length(survivedNumber)
notSurvivedNumber <- length(Titanic[,,,"No"])
survivedNumber <- length(Titanic[,,,"Yes"])
notSurvivedNumber <- length(Titanic[,,,"No"])
notSurvivedNumber <- length(Titanic[,,"Adult",])
notSurvivedNumber
notSurvivedNumber <- length(Titanic[,,,])
notSurvivedNumber
#b
proportions(survivedNumber)
#b
?proportions
#b
survivedNumber/length(Titanic)
#b
proportionsSurvived <- survivedNumber/length(Titanic)
proportionsNotSurvived <- notSurvivedNumber/length(Titanic)
#b
proportionsSurvived <- survivedNumber/length(Titanic)
proportionsNotSurvived <- notSurvivedNumber/length(Titanic)
#a
survivedNumber <- length(Titanic[,,,"Yes"])
notSurvivedNumber <- length(Titanic[,,,"No"])
#b
proportionsSurvived <- survivedNumber/length(Titanic)
proportionsNotSurvived <- notSurvivedNumber/length(Titanic)
#Exercise 4 ----
rexp(1000, 2)
#Exercise 4 ----
rexp(1, 2)
#Exercise 4 ----
X <- rexp(1, 2)
dexp(1000, 2)
dexp(3, 2)
fx3 <- dexp(3, 2)
fx1 <- dexp(1,2)
Fx1 <- pexp(1,2)
#b
1-pexp(2,2)
#b
pOfXMoreOrEqualThan2 <- 1-pexp(2,2)
pOfXBetween2.5And6 <- pexp(6,2) - pexp(2.5,2)
#c
qexp(0.9, 2)
#c
xThatFxIsEqualTo0.9 <- qexp(0.9, 2)
pexp(1.15,2)
#Exercise 5 ----
?USJudgeRatings
USJudgeRatings$PHYS
summary(USJudgeRatings$PHYS)
#a
summary(USJudgeRatings$PHYS)["Mean"]
#a
mean <- summary(USJudgeRatings$PHYS)["Mean"]
#a
meanPHYS <- summary(USJudgeRatings$PHYS)["Mean"]
?sd
sd(USJudgeRatings$PHYS)
standardDeviation <- sd(USJudgeRatings$PHYS)
#a
meanPHYS <- summary(USJudgeRatings$PHYS)["Mean"] #or just with mean function
medianPHYS <- summary(USJudgeRatings$PHYS)["Median"]
standardDeviation <- sd(USJudgeRatings$PHYS)
#a
meanPHYS <- summary(USJudgeRatings$PHYS)["Mean"] #or just with mean function
#a
meanPHYS <- mean(USJudgeRatings$PHYS) #or just with mean function
medianPHYS <- median(USJudgeRatings$PHYS)
standardDeviation <- sd(USJudgeRatings$PHYS)
#b
#c
hist(USJudgeRatings$PHYS)
#b
boxplot(USJudgeRatings$PHYS)
?outlier
?outliers
?quantile()
quantile(USJudgeRatings$PHYS, probs = c(0.25,0.75))
summary(USJudgeRatings$PHYS)
?boxplot
outliers <-
#b
boxplot(USJudgeRatings$PHYS)
#d
density(USJudgeRatings$PHYS)
#d
plot(density(USJudgeRatings$PHYS))
#d
densityCalculated <- density(USJudgeRatings$PHYS)
plot(densityCalculated)
#Exercise 6 ----
sd <- sqrt(4)
meanNorm <- 2
n <- 10^4
#Exercise 6 ----
sdNorm <- sqrt(4)
rnorm(n, meanNorm, sdNorm)
#a
rnorm(n, meanNorm, sdNorm)
#b
plot(pnorm(x, meanNorm, sdNorm))
#b
curve(pnorm(x, meanNorm, sdNorm))
#b
curve(dnorm(x, meanNorm, sdNorm))
#b
curve(pnorm(x, meanNorm, sdNorm))
#c
prop.table(Titanic)
#Exercise 3 ----
?Titanic
prop.table(Titanic, margin = 2)
prop.table(Titanic, margin = 2:4)
#d
?aperm
#c
proptable <- prop.table(Titanic, margin = 2:4)
aperm(proptable, c(1,2))
aperm(proptable, c(1,2,3,4))
aperm(proptable, c(4,4,4,4))
aperm(proptable, c(4,3,2,1))
#Exercise 3 ----
?Titanic
aperm(proptable, c(1,4,2,3))
aperm(proptable, c(1,2,4,3))
4
aperm(proptable, c(1,4,2,3))
outliers <-
#b?
USJudgeRatings$PHYS[USJudgeRatings$PHYS < 4]
outliers <-
#b?
USJudgeRatings$PHYS[USJudgeRatings$PHYS < 4]
outliers <-
#b?
USJudgeRatings$PHYS[USJudgeRatings$PHYS < 6]
outliers <-
#b
USJudgeRatings$PHYS[USJudgeRatings$PHYS < 6]
outliers <-
#b
outliers <- USJudgeRatings$PHYS[USJudgeRatings$PHYS < 6]
outliers
outliers <-
#b
?boxplot
outliers <-
#b
?boxplot
#b
?boxplot
?outliers
quantile(USJudgeRatings$PHYS, probs = c(0.25,0.75))
boxplot(USJudgeRatings$PHYS)
boxplot(USJudgeRatings$PHYS)
quantile(USJudgeRatings$PHYS, c(0.25,0.75))
#b
quantiles <- quantile(USJudgeRatings$PHYS, c(0.25,0.75))
abs(quantiles[1]-quantiles[2])
dif <- abs(quantiles[1]-quantiles[2])
outliers <- USJudgeRatings$PHYS[USJudgeRatings$PHYS < medianPHYS-1.5*dif]
outliers
outliers <- USJudgeRatings$PHYS[USJudgeRatings$PHYS < medianPHYS-1.5*dif | USJudgeRatings$PHYS > medianPHYS+1.5*dif]
outliers
medianPHYS-1.5*dif
meanPHYS-1.5*dif
meanPHYS-1.5*dif
#a
meanPHYS <- mean(USJudgeRatings$PHYS)
meanPHYS-1.5*dif
#a
meanPHYS <- mean(USJudgeRatings$PHYS)
medianPHYS <- median(USJudgeRatings$PHYS)
standardDeviation <- sd(USJudgeRatings$PHYS)
meanPHYS-1.5*dif
meanPHYS-1.5*dif
outliers <- USJudgeRatings$PHYS[USJudgeRatings$PHYS < medianPHYS-1.5*dif | USJudgeRatings$PHYS > medianPHYS+1.5*dif]
outliers
outliers <- USJudgeRatings$PHYS[USJudgeRatings$PHYS < meanPHYS-1.5*dif | USJudgeRatings$PHYS > medianPHYS+1.5*dif]
outliers
outliers <- USJudgeRatings$PHYS[USJudgeRatings$PHYS < meanPHYS-1.5*dif | USJudgeRatings$PHYS > meanPHYS+1.5*dif]
outliers
boxplot(USJudgeRatings$PHYS)
?boxplot
boxplot(USJudgeRatings$PHYS)
boxplot(USJudgeRatings$PHYS)
outliers
boxplot(USJudgeRatings$PHYS)
#b
curve(pnorm(x, meanNorm, sdNorm))
#a
rnorm(n, meanNorm, sdNorm)
#b
curve(pnorm(x, meanNorm, sdNorm))
#b
curve(pnorm(x, meanNorm, sdNorm), from = -10, to=10)
#Exercise 3 ----
?Titanic
#c
proptable <- prop.table(Titanic, margin = 1:3)
#d
?aperm
aperm(proptable, c(1,4,2,3))
#b
curve(pnorm(x, meanNorm, sdNorm), from = -10, to=10)
#d
iterator <- 1:n
#a
sample <- rnorm(n, meanNorm, sdNorm)
cummean(sample)
plot(cummean(sample))
plot(cummean(sample))
plot(cummean(sample), type = 'l')
abline(h = 2)
abline(h = 2, color="red")
abline(h = 2, co="red")
abline(h = 2, col="red")
#b
curve(pnorm(x, meanNorm, sdNorm), from = -10, to=10)
curve(pnorm(sample))
curve(ecfd(sample))
lines(ecfd(sample))
curve(ecfd(sample))
ecfd(sample)
ecfd(sample)
ecdf(sample)
lines(ecdf(sample))
lines(ecdf(sample), col="red")
#b
curve(pnorm(x, meanNorm, sdNorm), from = -10, to=10)
lines(ecdf(sample), col="red")
lines(ecdf(sample), col="red", add=TRUE)
lines(ecdf(sample), col="red")
#b
curve(pnorm(x, meanNorm, sdNorm), from = -10, to=10)
lines(ecdf(sample), col="red")
sample[1]
avg = sample[1:1000]/1:1000
avg
boxplot(USJudgeRatings$PHYS)
?boxplot
boxplot(USJudgeRatings$PHYS)
summary(USJudgeRatings$PHYS)
singularSample = newSample[1]
newSample <- rnorm(n, meanNorm, sdNorm)
singularSample = newSample[1]
mcStudy <- function(){
n=1000
newSample <- rnorm(n, meanNorm, sdNorm)
singularSample = newSample[1]
return(singularSample)
}
sapply(1:1000, mcStudy)
mcStudy <- function(a){
n=1000
newSample <- rnorm(n, meanNorm, sdNorm)
singularSample = newSample[1]
return(singularSample)
}
sapply(1:1000, mcStudy)
mean(sapply(1:1000, mcStudy))
mcStudy <- function(n){
newSample <- rnorm(n, meanNorm, sdNorm)
singularSample = newSample[1]
return(singularSample)
}
avg=0
mean(sapply(1:1000, mcStudy))
mcStudy <- function(n){
newSample <- rnorm(n, meanNorm, sdNorm)
singularSample = newSample[1]
return(singularSample)
}
avg=0
mean(sapply(1:1000, mcStudy))
mcStudy <- function(n){
newSample <- rnorm(n, meanNorm, sdNorm)
singularSample = newSample[1]
return(singularSample)
}
avg=0
mean(sapply(1:1000, mcStudy))
mcStudy <- function(n){
newSample <- rnorm(n, meanNorm, sdNorm)
singularSample = newSample[1]
return(singularSample)
}
avg=0
mean(sapply(1:1000, mcStudy))
mcStudy <- function(n){
newSample <- rnorm(n, meanNorm, sdNorm)
singularSample = newSample[1]
return(singularSample)
}
avg=0
mean(sapply(1:1000, mcStudy))
mean(sapply(rep(1000, 1000), mcStudy))
mean(sapply(rep(1000, 1000), mcStudy))
?boxplot
summary(USJudgeRatings$PHYS)
outliers <- USJudgeRatings$PHYS[USJudgeRatings$PHYS < meanPHYS-1.5*dif | USJudgeRatings$PHYS > meanPHYS+1.5*dif]
outliers
summary(USJudgeRatings$PHYS)
outliers <- USJudgeRatings$PHYS[USJudgeRatings$PHYS < quantiles[1]-1.5*dif | USJudgeRatings$PHYS > quantiles[2]+1.5*dif]
outliers
compare(sqldf4, dplyr4, allowAll=TRUE)
source("Michał_Taczała_assignment_1.R")
library(sqldf)
library(compare)
library(dplyr)
library(data.table)
library(microbenchmark)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Users <- read.csv("Users.csv")
Posts <- read.csv("Posts.csv")
Comments <- read.csv("Comments.csv")
PostLinks <- read.csv("PostLinks.csv")
#1 DONE ALL
sqldf1 <- sqldf_1(Posts, Users)
base1 <- base_1(Posts, Users)
dplyr1 <- dplyr_1(Posts, Users)
data.table1 <- data.table_1(Posts, Users)
compare(sqldf1, base1, allowAll=TRUE)
compare(sqldf1, dplyr1, allowAll = TRUE)
compare(sqldf1, data.table1, allowAll = TRUE)
microbenchmark::microbenchmark(
sqldf1 = sqldf_1(Posts, Users),
base1 = base_1(Posts, Users),
dplyr1 = dplyr_1(Posts, Users),
data.table1 = data.table_1(Posts, Users),
times = 10
)
#2
sqldf2 <- sqldf_2(Posts, PostLinks)
base2 <- base_2(Posts, PostLinks)
dplyr2 <- dplyr_2(Posts, PostLinks)
data.table2 <- data.table_2(Posts, PostLinks)
compare(sqldf2, base2, allowAll=TRUE)
compare(sqldf2, dplyr2, allowAll = TRUE)
compare(sqldf2, data.table2, allowAll = TRUE)
microbenchmark::microbenchmark(
sqldf=sqldf_2(Posts, PostLinks),
base=base_2(Posts, PostLinks),
dplyr=dplyr_2(Posts, PostLinks),
data.table=data.table_2(Posts, PostLinks),
times=10
)
#3.1 DONE ALL
sqldf3 <- sqldf_3(Posts, Users, Comments)
base3 <- base_3(Posts, Users, Comments)
dplyr3 <- dplyr_3(Posts, Users, Comments)
data.table3 <- data.table_3(Posts, Users, Comments)
compare(sqldf3, base3, allowAll=TRUE)
compare(sqldf3, dplyr3, allowAll=TRUE)
compare(sqldf3, data.table3, allowAll = TRUE)
microbenchmark::microbenchmark(
sqldf=sqldf_3(Posts, Users, Comments),
base=base_3(Posts, Users, Comments),
dplyr=dplyr_3(Posts, Users, Comments),
data.table=data.table_3(Posts, Users, Comments),
times=10
)
#4 DONE ALL
sqldf4 <- sqldf_4(Posts, Users)
base4 <- base_4(Posts, Users)
dplyr4 <- dplyr_4(Posts, Users)
data.table4 <- data.table_4(Posts, Users)
compare(sqldf4, base4, allowAll=TRUE)
compare(sqldf4, dplyr4, allowAll=TRUE)
compare(sqldf4, data.table4, allowAll = TRUE)
microbenchmark::microbenchmark(
sqldf=sqldf_4(Posts, Users),
base=base_4(Posts, Users),
dplyr=dplyr_4(Posts, Users),
data.table=data.table_4(Posts, Users),
times=10
)
#5 DONE ALL
sqldf5 <- sqldf_5(Posts)
base5 <- base_5(Posts)
dplyr5 <- dplyr_5(Posts)
data.table5 <- data.table_5(Posts)
compare(sqldf5, base5, allowAll=TRUE)
compare(sqldf5, dplyr5, allowAll = TRUE)
compare(sqldf5, data.table5, allowAll= TRUE)
microbenchmark::microbenchmark(
sqldf=sqldf_5(Posts),
base=base_5(Posts),
dplyr=dplyr_5(Posts),
data.table=data.table_5(Posts),
times=10
)
